(()=>{"use strict";addEventListener("fetch",(e=>{new URL(e.request.url).pathname.startsWith("/images/")?e.respondWith(async function(e){const t=new URL(e.url),n=decodeURIComponent(t.pathname.replace("/images/","")),s=await MY_R2_BUCKET.get(n);if(!s)return new Response("Image not found",{status:404});const a=new Headers;return s.writeHttpMetadata(a),a.set("Cache-Control","public, max-age=3600"),a.set("Access-Control-Allow-Origin","*"),new Response(s.body,{headers:a})}(e.request)):e.respondWith(async function(e){if("POST"!==e.method)return new Response("Method Not Allowed",{status:405});try{const t=await e.json(),{data:n,width:s,height:a}=t;if(!n||!s||!a)return new Response("Invalid request format. Data, width, and height are required.",{status:400});const r="data:image/png;base64,";if(!n.startsWith(r))return new Response("Invalid image data format",{status:400});const o=n.slice(r.length),i=Uint8Array.from(atob(o),(e=>e.charCodeAt(0))),c=`ogp-image-${Date.now()}-${s}x${a}.png`;await MY_R2_BUCKET.put(c,i,{httpMetadata:{contentType:"image/png"},customMetadata:{uploaded:(new Date).toISOString(),width:s.toString(),height:a.toString()}});const d=`${new URL(e.url).origin}/images/${encodeURIComponent(c)}`;return new Response(JSON.stringify({url:d}),{headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"}})}catch(e){return console.error("Error processing request:",e),new Response("Error processing request: "+(e.message||e),{status:500})}}(e.request))}))})();