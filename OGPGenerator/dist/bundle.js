(()=>{"use strict";addEventListener("fetch",(async e=>{e.respondWith(async function(e){if("POST"!==e.method)return new Response("Method Not Allowed",{status:405});try{const t=await e.json(),{data:n}=t;if(!n)return new Response("No data provided",{status:400});const s=n.replace(/^data:image\/png;base64,/,""),o=Uint8Array.from(atob(s),(e=>e.charCodeAt(0))),r=crypto.randomUUID(),a=new Request(`https://ogp-generator.huedpaw.workers.dev/temp-image/${r}`),i=await caches.open("my-cache");if(await i.match(a)){const e=a.url;return new Response(JSON.stringify({url:e}),{headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"}})}{const e=new Response(o,{headers:{"Content-Type":"image/png"}});await i.put(a,e.clone());const t=a.url;return new Response(JSON.stringify({url:t}),{headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*"}})}}catch(e){return new Response("Error processing request: "+(e.message||e),{status:500})}}(e.request))}))})();